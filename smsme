#!/bin/bash

# Run a command; when done, send an SMS message to a preconfigured phone# using textbelt.
#
# The text message will indicate success or failure and contain an id:
# day-of-week|hostname|username|2-random-emoji
#
# The emoji are randomly chosen each time you use smsme so that you can tell your
# texts apart. Just before running your command, smsme prints out the message id
# so you can find it later (in case you have many of these running at the same time).
# 
# You must purchase a textbelt api key to use `smsme`.


set -euo pipefail
IFS=$'\n\t'

phone=
key=
endpoint="https://textbelt.com/text"
emoji=(👻 👾 🤖 😼 💫 👒 🎩 🐶 🦎 🐚 🌸 🌲 🍋 🥝 🥑 🥐 🍿 🥄 ⛺ 🚂 🚲 🌈 🏆 🎵 💡 ✏ 🖍 📌 🛡 ♻)
good='✅'
bad='❌'

# build a string we can use to identify this command
format_marker() {
    # choose 2 random emoji
    local emokey="${emoji[$(( RANDOM % ${#emoji[@]} ))]}""${emoji[$(( RANDOM % ${#emoji[@]} ))]}" 
    local weekday
    weekday="$(date +%a | tr "[:upper:]" "[:lower:]")"
    printf "%s|%s|%s|%s" "$weekday" "$HOSTNAME" "$USER" "$emokey"
}

# prompt for key/phone and create a config file
first-run() {
    echo $'~'"/.smsme.env does not exist, so, I assume this is the first time we're running."
    echo
    echo "I will create a config file with the following information."
    echo
    read -rp "  Phone# to page: " phone
    read -rp "  Textbelt API Key: " key

    # empty=quit
    if [[ -z "$phone" || -z "$key" ]]; then
        echo "* canceled." 1>&2
        exit 1
    fi 

    # clean up the phone number
    phone=$(tr -dC "[:digit:]" <<< "$phone")

    # don't clean up the API key; you're always going to paste
    # that and if it's wrong, the following test will fail.

    if ! test_sms; then
        echo "* Bad key?" 1>&2
        exit 1
    else
        echo "Good key :-)"
    fi

    printf "phone=%s\nkey=%s\n" "$phone" "$key" > ~/.smsme.env
}

# request an sms message be sent and print results
sms() {
    local res="$1"
    shift
    echo "# ---------------------------------------------------------------------------" 1>&2
    local msg="$res >>>>>>>>> $*"
    echo "# MESSAGE: $msg" 1>&2
    printf "# %s\n" "$(do_request "$key" "$phone" "$msg")" 1>&2
}

# send a message to the API without consuming an API token; checks that our key works
test_sms() {
    printf "Testing your key> "
    data="$(do_request "${key}_test" "$phone" "testing")"
    rc=$?
    printf "%s\n\n" "$data"
    return $rc
}

# send the HTTP request to textbelt
do_request() {
    local lkey="$1"
    local lphone="$2"
    local msg="$3"

    data=$(curl -s -X POST "$endpoint" \
        --data-urlencode phone="$lphone" \
        --data-urlencode message="$msg" \
        -d key="$lkey")
    echo "$data"

    rc=$?
    if [[ $rc != 0 ]]; then
        return $rc
    fi

    [[ "$(jq -r .success <<< "$data")" == "true" ]]
}

# if the config file is missing, prompt for it
if [[ ! -e ~/.smsme.env ]]; then
    first-run
fi

# shellcheck disable=SC1090
. ~/.smsme.env

# need at least 1 arg following the command
if [[ "$#" -lt 1 ]]; then
    echo "Use: smsme <command args...>" 1>&2
    exit 1
fi

# run the command; the text that gets sent depends on whether it succeeds (rc=0)
marker="$(format_marker)"
echo "# your text id when done: $marker" 1>&2
echo "# ---------------------------------------------------------------------------" 1>&2
if "$@"; then
    sms "success $good (0)" "$marker"
else
    sms "fail $bad ($?)" "$marker"
fi
