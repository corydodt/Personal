#!/usr/bin/env python
import sys, os
import warnings; warnings.filterwarnings('ignore')

from twisted.python import usage
from twisted.python.filepath import FilePath

from pyPdf import PdfFileWriter, PdfFileReader


class Options(usage.Options):
    synopsis = "split a pdf into several files"
    # optParameters = [[long, short, default, help], ...]

    def parseArgs(self, filename, *pageFilenames):
        self['pageFilenames'] = pageFilenames
        self['filepath'] = FilePath(filename) 

    def postOptions(self):
        inp = PdfFileReader(self['filepath'].open('rb'))
        print "CONVERTING: %s (%s pages)" % (self['filepath'].path,
                inp.numPages)
        stub = os.path.splitext(self['filepath'].path)[0]
        filenames = ['%s-page-%s.pdf' % (stub, num) for num in 
                range(1, inp.numPages + 1)]
        for n, override in enumerate(self['pageFilenames']):
            # use slice assignment so we can either override or append to the
            # list, in case more filenames than pages.
            filenames[n:n+1] = [override]

        outputs = []
        for n, page in enumerate(inp.pages):
            output = PdfFileWriter()
            output.addPage(page)
            outputs.append(output)
            outFile = filenames[n]
            print 'writing %s' % (outFile,)
            output.write(open(outFile, 'wb'))


def run(argv=None):
    if argv is None:
        argv = sys.argv
    o = Options()
    try:
        o.parseOptions(argv[1:])
    except usage.UsageError, e:
        if hasattr(o, 'subOptions'):
            print str(o.subOptions)
        else:
            print str(o)
        print str(e)
        return 1

    return 0


if __name__ == '__main__': sys.exit(run())
