FROM ubuntu:20.04

# THIS IS MEANT TO BE INVOKED WITH PODMAN (better support for /sbin/init)
# THIS IS MEANT TO BE INVOKED WITH PODMAN (better support for /sbin/init)
# THIS IS MEANT TO BE INVOKED WITH PODMAN (better support for /sbin/init)

# Container features:
# - `cdodt` user installed with sudo
# - ssh service running
# - development software (python, terraform, node, go) preinstalled, with tools to install more
# - openvpn and net tools preinstalled


ARG USERNAME=cdodt
ARG USER_UID=1000
ARG USER_GID=$USER_UID
ARG UBUNTU_MIRROR=http://mirrors.accretive-networks.net/ubuntu/
ARG LABEL=vscode-env:16
ARG HOSTIP=192.168.0.36

ARG SSHPORT_1=2269
ARG NAME_PREFIX_1=decibelduck-dev

ARG SSHPORT_2=2222
ARG NAME_PREFIX_2=aero-dev

# Building:
# LABEL=vscode-env:16
# podman build --build-arg LABEL=$LABEL --tag $LABEL .

# tweak install environment for non-interactivity and speed
ENV DEBIAN_FRONTEND=noninteractive
RUN printf '\
deb '$UBUNTU_MIRROR' focal main restricted\n\
deb '$UBUNTU_MIRROR' focal-updates main restricted\n\
deb '$UBUNTU_MIRROR' focal universe\n\
deb '$UBUNTU_MIRROR' focal-updates universe\n\
deb '$UBUNTU_MIRROR' focal multiverse\n\
deb '$UBUNTU_MIRROR' focal-updates multiverse\n\
deb '$UBUNTU_MIRROR' focal-backports main restricted universe multiverse\n\
deb '$UBUNTU_MIRROR' focal-security main restricted\n\
deb '$UBUNTU_MIRROR' focal-security universe\n\
deb '$UBUNTU_MIRROR' focal-security multiverse\n'\
    > /etc/apt/sources.list

# install dev tools
RUN apt-get update \
    && apt-get install -y --no-install-recommends tzdata \
    && apt-get install -y \
        curl \
        git \
        gosu \
        gnupg \
        iputils-ping \
        jq \
        lsyncd \
        man-db \
        net-tools \
        rsync \
        software-properties-common \
        ssh \
        sudo \
        unzip \
        vim \
        wget \
        zip \
    && apt-get clean
RUN echo 'deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main' \
        >> /etc/apt/sources.list.d/google-cloud-sdk.list \
    && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - \
    && apt-get update
RUN apt-get install -y \
        awscli \
        build-essential \
        google-cloud-sdk \
        npm \
        openvpn \
        postgresql-client \
        python3 python3-dev \
        python3-pip \
        python3-venv \
    && apt-get clean
RUN ln -s /usr/bin/tar /usr/local/bin/gtar \
    && echo "turning on network services ssh, openvpn" \
    && sudo systemctl enable ssh openvpn@client \
    && echo "installing terraform" \
    && wget 'https://releases.hashicorp.com/terraform/1.1.7/terraform_1.1.7_linux_amd64.zip' \
    && unzip -d /usr/local/bin/ terraform_*_linux_amd64.zip && rm -v terraform_*_linux_amd64.zip
RUN echo "installing go" \
    && wget 'https://golang.org/dl/go1.18.linux-amd64.tar.gz' \
    && rm -rf /usr/local/go && tar -C /usr/local -xzf go1.18*.tar.gz && rm -v go1.18*.tar.gz
RUN echo "installing python module poetry" \
    && curl -sSL https://install.python-poetry.org | python3 -
## TODO: packer
## TODO: run unminimize
 
# global shell/terminal config
RUN printf '\
GOPATH=$HOME/go\n\
PATH=$PATH:/usr/local/go/bin:$GOPATH/bin\n'\
        >> /etc/profile.d/10-gopath.sh \
    && printf '\
set bell-style visible\n\
set keymap vi\n\
set editing-mode vi\n'\
        >> /etc/skel/.inputrc \
    && printf '\
if [[ -f ~/.ssh-agent.env ]]; then\n\
    { . ~/.ssh-agent.env; ssh-add -l || ssh-agent >~/.ssh-agent.env; } >/dev/null\n\
else\n\
    ssh-agent >~/.ssh-agent.env\n\
fi\n\
. ~/.ssh-agent.env >/dev/null\n'\
        >> /etc/profile.d/30-ssh-agent.sh

# Create the user
RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME -s /bin/bash \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

ENTRYPOINT ["/sbin/init"]

RUN printf '#!/usr/bin/env bash \n\
set -euo pipefail; IFS=$'\\n\\t' \n\
add_datetime() { echo "$1"-$(date +%%Y%%m%%d%%H%%M); } \n\
name_pfx="$1" \n\
ssh_port="$2" \n\
username="$3" \n\
hostip="$4" \n\
label="$5" \n\
name=$(add_datetime $name_pfx) \n\
\n\
echo podman run -d --name=$name --hostname=$name \\\n\
    --mount "type=volume,src=cdodt,dst=/home/$username" \\\n\
    --device /dev/net/tun --cap-add=NET_ADMIN \\\n\
    -p $hostip:$ssh_port:22 \\\n\
    --restart=always \\\n\
    -t $label bash\n\
' > /usr/local/bin/print-podman-command; chmod +x /usr/local/bin/print-podman-command; \
echo; /usr/local/bin/print-podman-command "$NAME_PREFIX_1" "$SSHPORT_1" "$USERNAME" "$HOSTIP" "$LABEL"; \
echo; /usr/local/bin/print-podman-command "$NAME_PREFIX_2" "$SSHPORT_2" "$USERNAME" "$HOSTIP" "$LABEL"; \
echo "**** You might need to run `sudo loginctl enable-linger $USER`"
